{"ast":null,"code":"var _jsxFileName = \"/home/anton/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/anya/hooks/src/components/charList/CharList.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './charList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CharList = props => {\n  _s();\n\n  const [charList, setCharList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [newItemsLoading, setNewItemsLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charListEnd, setCharListEnd] = useState(false);\n  const [selected, setSelected] = useState(null); //мое для активного стиля\n\n  const marvelService = new MarvelService();\n  useEffect(() => {\n    onRequest(); //при первичной загрузке => аргумента нет и метод ориенируется на _baseOffset в MarvelService\n  }, []); //пустой массив для отслеживания - функция выполнится только один раз -- при создании компонента.Имитация componentDidMount. useEffect вызыввается после рендера всего.\n\n  const onRequest = offset => {\n    onCharListLoading();\n    marvelService.getAllCharacters(offset).then(onCharLoaded).catch(onError);\n  };\n\n  const onCharListLoading = () => {\n    setNewItemsLoading(true);\n  };\n\n  const onCharLoaded = newCharList => {\n    let end = false;\n\n    if (newCharList.length < 9) {\n      end = true;\n    }\n\n    setCharList(charList => [...charList, ...newCharList]); //развернула старый массив персонажей и за ним добавила новый. При первичной загрузке charlist - пустой массив\n\n    setLoading(loading => false);\n    setNewItemsLoading(newItemsLoading => false);\n    setOffset(offset => offset + 9);\n    setCharListEnd(charListEnd => end);\n  };\n\n  const onError = () => {\n    setError(true);\n    setLoading(loading => false);\n  };\n\n  const handleClick = () => {\n    setSelected(selected => props.charId);\n  };\n\n  function renderCharacters(arr) {\n    const characters = arr.map(obj => {\n      let imgStyle = {\n        'objectFit': 'cover'\n      };\n\n      if (obj.thumbnail.includes('image_not_available')) {\n        imgStyle = {\n          'objectFit': 'unset'\n        };\n      }\n\n      let selectedClass = 'char__item  char__item_selected';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: props.charId === obj.id ? selectedClass : 'char__item',\n        onClick: () => {\n          handleClick();\n          props.onCharSelected(obj.id);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: obj.thumbnail,\n          alt: obj.name,\n          style: imgStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__name\",\n          children: obj.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, obj.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__grid\",\n      children: characters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this); //Для центровки спиннера/ошибки\n  }\n\n  const items = renderCharacters(charList);\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 34\n  }, this) : null;\n  const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 31\n  }, this) : null;\n  const content = !loading && !error ? items : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"char__list\",\n    children: [content, spinner, errorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button__main button__long\",\n      disabled: newItemsLoading,\n      style: {\n        'display': charListEnd ? 'none' : 'block'\n      },\n      onClick: () => {\n        onRequest(offset);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CharList, \"jU1NGqekV3RuheC2ENiNnxHd8xM=\");\n\n_c = CharList;\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n};\nexport default CharList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CharList\");","map":{"version":3,"sources":["/home/anton/Рабочий стол/anya/hooks/src/components/charList/CharList.js"],"names":["useState","useEffect","PropTypes","MarvelService","Spinner","ErrorMessage","CharList","props","charList","setCharList","loading","setLoading","error","setError","newItemsLoading","setNewItemsLoading","offset","setOffset","charListEnd","setCharListEnd","selected","setSelected","marvelService","onRequest","onCharListLoading","getAllCharacters","then","onCharLoaded","catch","onError","newCharList","end","length","handleClick","charId","renderCharacters","arr","characters","map","obj","imgStyle","thumbnail","includes","selectedClass","id","onCharSelected","name","items","errorMessage","spinner","content","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import { useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charListEnd, setCharListEnd] = useState(false);\n    const [selected, setSelected] = useState(null); //мое для активного стиля\n\n    const marvelService = new MarvelService();\n\n    useEffect(() => {\n        onRequest(); //при первичной загрузке => аргумента нет и метод ориенируется на _baseOffset в MarvelService\n    }, []); //пустой массив для отслеживания - функция выполнится только один раз -- при создании компонента.Имитация componentDidMount. useEffect вызыввается после рендера всего.\n\n    const onRequest = (offset) => {\n        onCharListLoading();\n\n        marvelService\n            .getAllCharacters(offset)\n            .then(onCharLoaded)\n            .catch(onError)\n    }\n\n    const onCharListLoading = () => {\n       setNewItemsLoading(true);\n    }\n\n    const onCharLoaded = (newCharList) => {\n        let end = false;\n        if (newCharList.length < 9) {\n            end = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]); //развернула старый массив персонажей и за ним добавила новый. При первичной загрузке charlist - пустой массив\n        setLoading(loading => false);\n        setNewItemsLoading(newItemsLoading => false);\n        setOffset(offset => offset + 9);\n        setCharListEnd(charListEnd => end);\n    }\n\n    const onError = () => {\n        setError(true);\n        setLoading(loading => false);\n    }\n\n    const handleClick = ()  => {\n        setSelected(selected => props.charId);\n      }\n\n    function renderCharacters(arr) {\n        const characters = arr.map( obj => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (obj.thumbnail.includes('image_not_available')) {\n                imgStyle = {'objectFit' : 'unset'};\n            }            \n\n            let selectedClass = 'char__item  char__item_selected';\n\n            return (\n                <li\n                className={props.charId === obj.id ? selectedClass : 'char__item'}\n                key={obj.id}\n                onClick={() => {\n                    handleClick();\n                    props.onCharSelected(obj.id)\n                }}>\n                    <img src={obj.thumbnail} alt={obj.name}  style={imgStyle}/>\n                    <div className=\"char__name\">{obj.name}</div>\n                </li>\n            )\n            \n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {characters}\n            </ul>\n        ) //Для центровки спиннера/ошибки\n    }\n        \n    const items = renderCharacters(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !loading && !error ? items : null;\n\n    return (\n        <div className=\"char__list\">\n                {content}\n                {spinner}\n                {errorMessage}\n            <button\n            className=\"button button__main button__long\"\n            disabled={newItemsLoading}\n            style={{'display': charListEnd ? 'none' : 'block'}}\n            onClick={() => {onRequest(offset)}}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )   \n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;"]},"metadata":{},"sourceType":"module"}