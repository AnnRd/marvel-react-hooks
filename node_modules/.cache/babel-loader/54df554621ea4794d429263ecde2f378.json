{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  _s();\n\n  const {\n    loading,\n    request,\n    error,\n    clearError\n  } = useHttp();\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  const _apiKey = 'apikey=f65f5a21349dce7531dd6bd0db9e3868';\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async id => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  }; //для стр комиксов\n\n\n  const getComics = async (offset = 0) => {\n    const res = await request(`${_apiBase}comics?${_apiKey}`);\n    return res.data.results.map(_transformComics);\n  };\n\n  const _transformComics = comics => {\n    return {\n      name: comics.title,\n      price: comics.prices[0].price,\n      image: comics.images[0].path\n    };\n  };\n\n  const _transformCharacter = character => {\n    return {\n      id: character.id,\n      name: character.name,\n      description: character.description ? `${character.description.slice(0, 210)}...` : 'There`s no description for this character',\n      thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\n      homepage: character.urls[0].url,\n      wiki: character.urls[1].url,\n      comics: character.comics.items\n    };\n  };\n\n  return {\n    loading,\n    error,\n    getAllCharacters,\n    getCharacter,\n    clearError,\n    getComics\n  };\n};\n\n_s(useMarvelService, \"9hyEhuOfcolEaHPbDIyQe2OeeLY=\", false, function () {\n  return [useHttp];\n});\n\nexport default useMarvelService;","map":{"version":3,"sources":["/home/anton/Рабочий стол/anya/hooks/src/services/MarvelService.js"],"names":["useHttp","useMarvelService","loading","request","error","clearError","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","data","results","map","_transformCharacter","getCharacter","id","getComics","_transformComics","comics","name","title","price","prices","image","images","path","character","description","slice","thumbnail","extension","homepage","urls","url","wiki","items"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,oBAAxB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA,KAAnB;AAA0BC,IAAAA;AAA1B,MAAwCL,OAAO,EAArD;AAEA,QAAMM,QAAQ,GAAG,2CAAjB;AACA,QAAMC,OAAO,GAAG,yCAAhB;AACA,QAAMC,WAAW,GAAG,GAApB;;AAEA,QAAMC,gBAAgB,GAAG,OAAOC,MAAM,GAAGF,WAAhB,KAAgC;AACrD,UAAMG,GAAG,GAAG,MAAMR,OAAO,CAAE,GAAEG,QAAS,6BAA4BI,MAAO,IAAGH,OAAQ,EAA3D,CAAzB;AACA,WAAOI,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiBC,GAAjB,CAAqBC,mBAArB,CAAP;AACH,GAHD;;AAKA,QAAMC,YAAY,GAAG,MAAOC,EAAP,IAAc;AAC/B,UAAMN,GAAG,GAAG,MAAMR,OAAO,CAAE,GAAEG,QAAS,cAAaW,EAAG,IAAGV,OAAQ,EAAxC,CAAzB;AAEA,WAAOQ,mBAAmB,CAACJ,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiB,CAAjB,CAAD,CAA1B;AACH,GAJD,CAZ2B,CAkB3B;;;AAEA,QAAMK,SAAS,GAAG,OAAOR,MAAM,GAAG,CAAhB,KAAsB;AACpC,UAAMC,GAAG,GAAG,MAAMR,OAAO,CAAE,GAAEG,QAAS,UAASC,OAAQ,EAA9B,CAAzB;AACA,WAAOI,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiBC,GAAjB,CAAqBK,gBAArB,CAAP;AACH,GAHD;;AAKA,QAAMA,gBAAgB,GAAIC,MAAD,IAAY;AACjC,WAAO;AACHC,MAAAA,IAAI,EAAED,MAAM,CAACE,KADV;AAEHC,MAAAA,KAAK,EAAEH,MAAM,CAACI,MAAP,CAAc,CAAd,EAAiBD,KAFrB;AAGHE,MAAAA,KAAK,EAAEL,MAAM,CAACM,MAAP,CAAc,CAAd,EAAiBC;AAHrB,KAAP;AAKH,GAND;;AAQA,QAAMZ,mBAAmB,GAAIa,SAAD,IAAe;AACvC,WAAO;AACHX,MAAAA,EAAE,EAAEW,SAAS,CAACX,EADX;AAEHI,MAAAA,IAAI,EAAEO,SAAS,CAACP,IAFb;AAGHQ,MAAAA,WAAW,EAAED,SAAS,CAACC,WAAV,GAAyB,GAAED,SAAS,CAACC,WAAV,CAAsBC,KAAtB,CAA4B,CAA5B,EAA+B,GAA/B,CAAoC,KAA/D,GAAsE,2CAHhF;AAIHC,MAAAA,SAAS,EAAEH,SAAS,CAACG,SAAV,CAAoBJ,IAApB,GAA2B,GAA3B,GAAiCC,SAAS,CAACG,SAAV,CAAoBC,SAJ7D;AAKHC,MAAAA,QAAQ,EAAEL,SAAS,CAACM,IAAV,CAAe,CAAf,EAAkBC,GALzB;AAMHC,MAAAA,IAAI,EAAER,SAAS,CAACM,IAAV,CAAe,CAAf,EAAkBC,GANrB;AAOHf,MAAAA,MAAM,EAAEQ,SAAS,CAACR,MAAV,CAAiBiB;AAPtB,KAAP;AASH,GAVD;;AAYA,SAAO;AAACnC,IAAAA,OAAD;AAAUE,IAAAA,KAAV;AAAiBK,IAAAA,gBAAjB;AAAmCO,IAAAA,YAAnC;AAAiDX,IAAAA,UAAjD;AAA6Da,IAAAA;AAA7D,GAAP;AACH,CA9CD;;GAAMjB,gB;UAC4CD,O;;;AA+ClD,eAAeC,gBAAf","sourcesContent":["import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=f65f5a21349dce7531dd6bd0db9e3868';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    //для стр комиксов\n\n    const getComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?${_apiKey}`);\n        return res.data.results.map(_transformComics)\n    }\n    \n    const _transformComics = (comics) => {\n        return {\n            name: comics.title,\n            price: comics.prices[0].price,\n            image: comics.images[0].path \n        }\n    }\n\n    const _transformCharacter = (character) => {\n        return {\n            id: character.id,\n            name: character.name,\n            description: character.description ? `${character.description.slice(0, 210)}...` : 'There`s no description for this character',\n            thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\n            homepage: character.urls[0].url,\n            wiki: character.urls[1].url,\n            comics: character.comics.items,\n        }\n    }\n\n    return {loading, error, getAllCharacters, getCharacter, clearError, getComics};\n}\n\nexport default useMarvelService;"]},"metadata":{},"sourceType":"module"}