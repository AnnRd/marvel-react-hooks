{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {\n    'Content-Type': 'application/json'\n  }) => {\n    setLoading(true); //перед отправкой запроса загрузка ставится в true\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n\n      if (!response.ok) {\n        throw new Error(`Can not fetch ${url}, status : ${res.status}`);\n      }\n\n      const data = await response.json(); //в проекте работа только с json\n\n      setLoading(false);\n      return data; //загрузка завершается и, если всё ок, возвращаются \"чистые\" данные (не из MarvelService) от API\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      throw error;\n    }\n  }, []);\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"wBqGcGl6EafFNGt940fH8x5vtvA=\");","map":{"version":3,"sources":["/home/anton/Рабочий стол/anya/hooks/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","ok","Error","res","status","data","json","message","clearError"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAC,OAAOO,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG;AAAC,oBAAgB;AAAjB,GAAnD,KAA4F;AAEpHP,IAAAA,UAAU,CAAC,IAAD,CAAV,CAFoH,CAElG;;AAElB,QAAI;AACA,YAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA5B;;AAEA,UAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAW,iBAAgBP,GAAI,cAAaQ,GAAG,CAACC,MAAO,EAAvD,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB,CAPA,CAOoC;;AAEpCf,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEA,aAAOc,IAAP,CAXA,CAWa;AAChB,KAZD,CAYE,OAAOb,KAAP,EAAc;AACZD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACD,KAAK,CAACe,OAAP,CAAR;AACA,YAAMf,KAAN;AACH;AAEJ,GAtB0B,EAsBxB,EAtBwB,CAA3B;AAwBA,QAAMgB,UAAU,GAAGpB,WAAW,CAAC,MAAM;AAACK,IAAAA,QAAQ,CAAC,IAAD,CAAR;AAAe,GAAvB,EAAyB,EAAzB,CAA9B;AAEA,SAAO;AAACH,IAAAA,OAAD;AAAUI,IAAAA,OAAV;AAAmBF,IAAAA,KAAnB;AAA0BgB,IAAAA;AAA1B,GAAP;AACH,CA/BM;;GAAMnB,O","sourcesContent":["import {useState, useCallback} from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true); //перед отправкой запроса загрузка ставится в true\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Can not fetch ${url}, status : ${res.status}`);\n            }\n\n            const data = await response.json(); //в проекте работа только с json\n\n            setLoading(false);\n\n            return data; //загрузка завершается и, если всё ок, возвращаются \"чистые\" данные (не из MarvelService) от API\n        } catch (error) {\n            setLoading(false);\n            setError(error.message);\n            throw error;\n        }\n\n    }, []);\n\n    const clearError = useCallback(() => {setError(null)}, []);\n\n    return {loading, request, error, clearError};\n}"]},"metadata":{},"sourceType":"module"}