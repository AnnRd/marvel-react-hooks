{"ast":null,"code":"var _jsxFileName = \"/home/anton/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/anya/hooks/src/components/charInfo/CharInfo.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Sceleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CharInfo = props => {\n  _s();\n\n  const [character, setCharacter] = useState(null);\n  const {\n    loading,\n    error,\n    getCharacter,\n    clearError\n  } = useMarvelService();\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const {\n      charId\n    } = props;\n\n    if (!charId) {\n      return;\n    }\n\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = character => {\n    setCharacter(character);\n  };\n\n  const skeleton = character || loading || error ? null : /*#__PURE__*/_jsxDEV(Sceleton, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 65\n  }, this); // \"заглушка\" пока не выбран никакой персонаж из charList\n\n  const content = !loading && !error && character ? /*#__PURE__*/_jsxDEV(View, {\n    character: character\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 59\n  }, this) : null;\n  const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 35\n  }, this) : null;\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 37\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"char__info\",\n    children: [skeleton, content, spinner, errorMessage]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 13\n  }, this);\n};\n\n_s(CharInfo, \"CbjTS2xwmx0XmJTjf0SZQt+Qv8Y=\", false, function () {\n  return [useMarvelService];\n});\n\n_c = CharInfo;\n\nconst View = ({\n  character\n}) => {\n  const {\n    name,\n    description,\n    thumbnail,\n    homepage,\n    wiki,\n    comics\n  } = character;\n  const notAvailableImg = thumbnail.includes('image_not_available');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__basics\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: thumbnail,\n        alt: name,\n        style: {\n          objectFit: notAvailableImg ? 'contain' : 'cover'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__info-name\",\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: homepage,\n            className: \"button button__main\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inner\",\n              children: \"homepage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: wiki,\n            className: \"button button__secondary\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inner\",\n              children: \"Wiki\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__descr\",\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__comics\",\n      children: \"Comics:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__comics-list\",\n      children: [comics.length > 0 ? null : 'There`s no comics with this character.', comics.map((item, i) => {\n        if (i > 9) {\n          return;\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"char__comics-item\",\n          children: item.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c2 = View;\nCharInfo.propTypes = {\n  charId: PropTypes.number\n};\nexport default CharInfo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CharInfo\");\n$RefreshReg$(_c2, \"View\");","map":{"version":3,"sources":["/home/anton/Рабочий стол/anya/hooks/src/components/charInfo/CharInfo.js"],"names":["useState","useEffect","PropTypes","useMarvelService","Spinner","ErrorMessage","Sceleton","CharInfo","props","character","setCharacter","loading","error","getCharacter","clearError","updateChar","charId","then","onCharLoaded","skeleton","content","spinner","errorMessage","View","name","description","thumbnail","homepage","wiki","comics","notAvailableImg","includes","objectFit","length","map","item","i","propTypes","number"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Sceleton from '../skeleton/Skeleton'\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [character, setCharacter] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n\n        if (!charId) {\n            return;\n        }\n        \n        getCharacter(charId)\n            .then(onCharLoaded);\n    }\n\n    const onCharLoaded = (character) => {\n        setCharacter(character);\n    }\n\n        const skeleton = character || loading || error ? null : <Sceleton/>; // \"заглушка\" пока не выбран никакой персонаж из charList\n        const content = !loading && !error && character ? <View character={character}/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const errorMessage = error? <ErrorMessage/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {content}\n                {spinner}\n                {errorMessage}\n            </div>\n        )\n}\n\nconst View = ({character}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = character;\n    const notAvailableImg = thumbnail.includes('image_not_available');\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={{objectFit: notAvailableImg ? 'contain' : 'cover'}}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n               {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There`s no comics with this character.'}\n                {\n                    comics.map( (item, i) => {\n                        if (i > 9) {\n                            return;\n                        }\n\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;"]},"metadata":{},"sourceType":"module"}