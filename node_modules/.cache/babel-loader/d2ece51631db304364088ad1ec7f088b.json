{"ast":null,"code":"var _jsxFileName = \"/home/anton/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/anya/marvel/marvel/src/components/charList/CharList.js\";\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './charList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CharList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      charList: [],\n      loading: true,\n      error: false,\n      newItemsLoading: false,\n      offset: 210,\n      charListEnd: false,\n      isChecked: false\n    };\n    this.marvelService = new MarvelService();\n\n    this.onRequest = offset => {\n      this.onCharListLoading();\n      this.marvelService.getAllCharacters(offset).then(this.onCharLoaded).catch(this.onError);\n    };\n\n    this.onCharListLoading = () => {\n      this.setState({\n        newItemsLoading: true\n      });\n    };\n\n    this.onCharLoaded = newCharList => {\n      let end = false;\n\n      if (newCharList.length < 9) {\n        end = true;\n      }\n\n      this.setState(({\n        charList,\n        offset\n      }) => ({\n        charList: [...charList, ...newCharList],\n        //развернула старый массив персонажей и за ним добавила новый. При первичной загрузке charlist - пустой массив\n        loading: false,\n        newItemsLoading: false,\n        offset: offset + 9,\n        charListEnd: end\n      }));\n    };\n\n    this.onError = () => {\n      this.setState({\n        loading: false,\n        error: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.onRequest(); //запускается и при первичной загрузке => аргумента нет и метод ориенируется на _baseOffset в MarvelService\n  }\n\n  renderCharacters(arr) {\n    const characters = arr.map(obj => {\n      let imgStyle = {\n        'objectFit': 'cover'\n      };\n\n      if (obj.thumbnail.includes('image_not_available')) {\n        imgStyle = {\n          'objectFit': 'unset'\n        };\n      } // this.setState({\n      //     isChecked: true,\n      // })\n      //let classNaming = event.target.textContent === obj.name;\n      // {classNaming ? 'char__item char__item_selected' : 'char__item'}\n      //хуйня\n\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"char__item\",\n        onClick: event => {\n          if (obj.name === event.target.textContent) {\n            this.setState({\n              isChecked: true\n            });\n            event.target.className = 'char__item  char__item_selected';\n          } // console.log(obj.name);\n          // console.log(event.target.textContent);\n          // if (this.props.charId !== obj.id){\n          //     event.target.className = 'char__item char__item_selected';\n          // }\n          // if (event.target.textContent === obj.name && event.target.tagName === 'li') {\n          //     event.target.className += ' char__item_selected'\n          // } else {\n          //     event.target.className = 'char__item'\n          // }\n          //почему-то тоже ничего не делает\n          // if (event.target.textContent === obj.name && event.target.tagName === 'li') {\n          //     event.target.className = 'char__item char__item_selected'\n          // } else {\n          //     event.target.className = 'char__item'\n          // } \n          //ничего не делает\n\n\n          this.props.onCharSelected(obj.id);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: obj.thumbnail,\n          alt: obj.name,\n          style: imgStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__name\",\n          children: obj.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, obj.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this); //  УБРАТЬ АКТИВНЫЙ СТИЛЬ - безз него класс char__item\n    });\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__grid\",\n      children: characters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this) // <ul className=\"char__grid\" onClick={ event => {\n    //     if (event.target.tagName === 'LI') {\n    //         event.target.className = 'char__item char__item_selected';\n    //     }\n    // }}>\n    //     {characters}\n    // </ul>\n    ; //Для центровки спиннера/ошибки\n  }\n\n  render() {\n    const {\n      charList,\n      loading,\n      error,\n      newItemsLoading,\n      offset,\n      charListEnd\n    } = this.state;\n    const items = this.renderCharacters(charList);\n    const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 38\n    }, this) : null;\n    const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 35\n    }, this) : null;\n    const content = !loading && !error ? items : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__list\",\n      children: [content, spinner, errorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button button__main button__long\",\n        disabled: newItemsLoading,\n        style: {\n          'display': charListEnd ? 'none' : 'block'\n        },\n        onClick: () => {\n          this.onRequest(offset);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner\",\n          children: \"load more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n};\nexport default CharList;","map":{"version":3,"sources":["/home/anton/Рабочий стол/anya/marvel/marvel/src/components/charList/CharList.js"],"names":["Component","PropTypes","MarvelService","Spinner","ErrorMessage","CharList","state","charList","loading","error","newItemsLoading","offset","charListEnd","isChecked","marvelService","onRequest","onCharListLoading","getAllCharacters","then","onCharLoaded","catch","onError","setState","newCharList","end","length","componentDidMount","renderCharacters","arr","characters","map","obj","imgStyle","thumbnail","includes","event","name","target","textContent","className","props","onCharSelected","id","render","items","errorMessage","spinner","content","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nclass CharList extends Component{\n    state = {\n        charList: [],\n        loading: true,\n        error: false,\n        newItemsLoading: false,\n        offset: 210,\n        charListEnd: false,\n        isChecked: false\n    };\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.onRequest(); //запускается и при первичной загрузке => аргумента нет и метод ориенируется на _baseOffset в MarvelService\n    }\n\n    onRequest = (offset) => {\n        this.onCharListLoading();\n\n        this.marvelService\n            .getAllCharacters(offset)\n            .then(this.onCharLoaded)\n            .catch(this.onError)\n    }\n\n    onCharListLoading = () => {\n        this.setState({\n            newItemsLoading: true\n        })\n    }\n\n    onCharLoaded = (newCharList) => {\n        let end = false;\n        if (newCharList.length < 9) {\n            end = true;\n        }\n\n        this.setState( ({charList, offset}) => ({\n            charList: [...charList, ...newCharList],  //развернула старый массив персонажей и за ним добавила новый. При первичной загрузке charlist - пустой массив\n            loading: false,\n            newItemsLoading: false,\n            offset: offset + 9,\n            charListEnd: end,\n        }))\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n\n    renderCharacters(arr) {\n        const characters = arr.map( obj => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (obj.thumbnail.includes('image_not_available')) {\n                imgStyle = {'objectFit' : 'unset'};\n            }            \n\n            // this.setState({\n            //     isChecked: true,\n            // })\n\n            //let classNaming = event.target.textContent === obj.name;\n            // {classNaming ? 'char__item char__item_selected' : 'char__item'}\n           //хуйня\n\n            return (\n                <li className='char__item' key={obj.id} onClick={(event) => {\n                    if (obj.name === event.target.textContent) {\n                        this.setState({isChecked: true})\n                        event.target.className = 'char__item  char__item_selected'\n                    }\n                    // console.log(obj.name);\n                    // console.log(event.target.textContent);\n\n                // if (this.props.charId !== obj.id){\n                //     event.target.className = 'char__item char__item_selected';\n                // }\n\n                    // if (event.target.textContent === obj.name && event.target.tagName === 'li') {\n                    //     event.target.className += ' char__item_selected'\n                    // } else {\n                    //     event.target.className = 'char__item'\n                    // }\n                    //почему-то тоже ничего не делает\n\n                    // if (event.target.textContent === obj.name && event.target.tagName === 'li') {\n                    //     event.target.className = 'char__item char__item_selected'\n                    // } else {\n                    //     event.target.className = 'char__item'\n                    // } \n                    //ничего не делает\n\n                    this.props.onCharSelected(obj.id)\n                }}>\n                    <img src={obj.thumbnail} alt={obj.name}  style={imgStyle}/>\n                    <div className=\"char__name\">{obj.name}</div>\n                </li>\n            ) //  УБРАТЬ АКТИВНЫЙ СТИЛЬ - безз него класс char__item\n            \n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {characters}\n            </ul>\n\n            // <ul className=\"char__grid\" onClick={ event => {\n            //     if (event.target.tagName === 'LI') {\n            //         event.target.className = 'char__item char__item_selected';\n            //     }\n\n            // }}>\n            //     {characters}\n            // </ul>\n        ) //Для центровки спиннера/ошибки\n    }\n    \n\n    render() {\n        const {charList, loading, error, newItemsLoading, offset, charListEnd} = this.state;\n        \n        const items = this.renderCharacters(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !loading && !error ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                    {content}\n                    {spinner}\n                    {errorMessage}\n                <button\n                className=\"button button__main button__long\"\n                disabled={newItemsLoading}\n                style={{'display': charListEnd ? 'none' : 'block'}}\n                onClick={() => {this.onRequest(offset)}}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n    \n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;"]},"metadata":{},"sourceType":"module"}